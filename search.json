[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 group8 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tony Liang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liang T (2022). group8: Abstract Functions Helpers Dsci 310 Group 8. R package version 0.0.0.9000.","code":"@Manual{,   title = {group8: Abstract Functions And Helpers of Dsci 310 Group 8},   author = {Tony Liang},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"group-members","dir":"","previous_headings":"","what":"Group Members","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"Contributors: Isabela Lucas Bruxellas (33569286) Tony Liang (39356993) Xue Wang (50938547) Anam Hira (67844266)","code":""},{"path":"/index.html","id":"project-summary","dir":"","previous_headings":"","what":"Project Summary","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"project, explore predict students’ exam performance Electrical DC Machines based study time using linear regression (LN) K-nearest neighbors (K-NN) algorithm. result help students gain insight necessary study time specific scores well help instructors better understand performance students. repository analysis can found package contains functions necessary analysis.","code":""},{"path":"/index.html","id":"report","dir":"","previous_headings":"","what":"Report","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"analysis report can found .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"can install development version group8 GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DSCI-310/DSCI-310-Group-8-package\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"DSCI-310-Group-8-package four functions , num_na : function shows whether N/value data frame return number shows many N/values input. summary_fun : function shows summary statistic column original input. visualize_vars : function test whether ggplot point graph two variables date frame. wrangle_data : function test whether contains necessary variables returns tidy data frame. running code block R file. Attention: Needs used devtools already installed local repository. Otherwise, can skipped","code":"# install.packages(\"devtools\")"},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"R version 4.1.1, Jupyter R packages listed environment.yml.","code":""},{"path":"/index.html","id":"licenses","dir":"","previous_headings":"","what":"Licenses","title":"Abstract Functions And Helpers of Dsci 310 Group 8","text":"DSCI-310-Group-8-package created Isabela Lucas Bruxellas, Tony Liang, Xue Wang, Anam Hira. package licensed MIT License Creative Commons Attribution-NonCommerical-NoDerivatives 4.0 International License Attention: order properly run project, ensure using versions running project Dockerfile.","code":""},{"path":"/reference/num_na.html","id":null,"dir":"Reference","previous_headings":"","what":"counts number of na values of a variable in a df — num_na","title":"counts number of na values of a variable in a df — num_na","text":"counts number na values variable df","code":""},{"path":"/reference/num_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"counts number of na values of a variable in a df — num_na","text":"","code":"num_na(df, var)"},{"path":"/reference/num_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"counts number of na values of a variable in a df — num_na","text":"df data frame extension var unquoted column/variable name count number NA values","code":""},{"path":"/reference/num_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"counts number of na values of a variable in a df — num_na","text":"number many na values contain input var","code":""},{"path":"/reference/num_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"counts number of na values of a variable in a df — num_na","text":"","code":"num_na(mtcars, mpg) #> [1] 0 num_na(mtcars, cyl) #> [1] 0 num_na(mtcars, disp) #> [1] 0"},{"path":"/reference/summary_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"summary function that applies a function to whole data frame\nwhile removing na values — summary_fun","title":"summary function that applies a function to whole data frame\nwhile removing na values — summary_fun","text":"summary function applies function whole data frame removing na values","code":""},{"path":"/reference/summary_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary function that applies a function to whole data frame\nwhile removing na values — summary_fun","text":"","code":"summary_fun(df, fun)"},{"path":"/reference/summary_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary function that applies a function to whole data frame\nwhile removing na values — summary_fun","text":"df data frame interested apply summary function (eg. mean, standard deviation) fun function apply input df","code":""},{"path":"/reference/summary_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary function that applies a function to whole data frame\nwhile removing na values — summary_fun","text":"data.frame shows summary statistic column original input df, rounded one decimal place","code":""},{"path":"/reference/summary_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary function that applies a function to whole data frame\nwhile removing na values — summary_fun","text":"","code":"summary_fun(mtcars, mean) #> # A tibble: 1 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  20.1  6.19  231.  147.   3.6  3.22  17.8  0.44  0.41  3.69  2.81 summary_fun(mtcars, sd) #> # A tibble: 1 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  6.03  1.79  124.  68.6  0.53  0.98  1.79   0.5   0.5  0.74  1.62 summary_fun(mtcars, max) #> # A tibble: 1 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  33.9     8   472   335  4.93  5.42  22.9     1     1     5     8"},{"path":"/reference/visualize_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a df with two specified variables and an optional alpha value — visualize_vars","title":"Visualize a df with two specified variables and an optional alpha value — visualize_vars","text":"Visualize df two specified variables optional alpha value","code":""},{"path":"/reference/visualize_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a df with two specified variables and an optional alpha value — visualize_vars","text":"","code":"visualize_vars(df, x, y, alpha = 0.4)"},{"path":"/reference/visualize_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a df with two specified variables and an optional alpha value — visualize_vars","text":"df data frame extension x numeric variable shown x-axis y numeric variable shown y-axis alpha number default 0.4. viewers want change anything , can set alpha decimal number function.","code":""},{"path":"/reference/visualize_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a df with two specified variables and an optional alpha value — visualize_vars","text":"ggplot point graph two variables df","code":""},{"path":"/reference/visualize_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a df with two specified variables and an optional alpha value — visualize_vars","text":"","code":"visualize_vars(mtcars, mpg, cyl)  visualize_vars(data.frame(x = 1, y =2), x,y)"},{"path":"/reference/wrangle_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrangle the df and keep only the interested variables (unquoted)\nand output should have same type as of df. — wrangle_data","title":"Wrangle the df and keep only the interested variables (unquoted)\nand output should have same type as of df. — wrangle_data","text":"Wrangle df keep interested variables (unquoted) output type df.","code":""},{"path":"/reference/wrangle_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrangle the df and keep only the interested variables (unquoted)\nand output should have same type as of df. — wrangle_data","text":"","code":"wrangle_data(df, ...)"},{"path":"/reference/wrangle_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrangle the df and keep only the interested variables (unquoted)\nand output should have same type as of df. — wrangle_data","text":"df data frame needs wrangle ... unquoted variables names select data","code":""},{"path":"/reference/wrangle_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrangle the df and keep only the interested variables (unquoted)\nand output should have same type as of df. — wrangle_data","text":"data frame contains variables specified","code":""},{"path":"/reference/wrangle_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrangle the df and keep only the interested variables (unquoted)\nand output should have same type as of df. — wrangle_data","text":"","code":"wrangle_data(mtcars, mpg) #>                      mpg #> Mazda RX4           21.0 #> Mazda RX4 Wag       21.0 #> Datsun 710          22.8 #> Hornet 4 Drive      21.4 #> Hornet Sportabout   18.7 #> Valiant             18.1 #> Duster 360          14.3 #> Merc 240D           24.4 #> Merc 230            22.8 #> Merc 280            19.2 #> Merc 280C           17.8 #> Merc 450SE          16.4 #> Merc 450SL          17.3 #> Merc 450SLC         15.2 #> Cadillac Fleetwood  10.4 #> Lincoln Continental 10.4 #> Chrysler Imperial   14.7 #> Fiat 128            32.4 #> Honda Civic         30.4 #> Toyota Corolla      33.9 #> Toyota Corona       21.5 #> Dodge Challenger    15.5 #> AMC Javelin         15.2 #> Camaro Z28          13.3 #> Pontiac Firebird    19.2 #> Fiat X1-9           27.3 #> Porsche 914-2       26.0 #> Lotus Europa        30.4 #> Ford Pantera L      15.8 #> Ferrari Dino        19.7 #> Maserati Bora       15.0 #> Volvo 142E          21.4 wrangle_data(mtcars, mpg, disp) #>                      mpg  disp #> Mazda RX4           21.0 160.0 #> Mazda RX4 Wag       21.0 160.0 #> Datsun 710          22.8 108.0 #> Hornet 4 Drive      21.4 258.0 #> Hornet Sportabout   18.7 360.0 #> Valiant             18.1 225.0 #> Duster 360          14.3 360.0 #> Merc 240D           24.4 146.7 #> Merc 230            22.8 140.8 #> Merc 280            19.2 167.6 #> Merc 280C           17.8 167.6 #> Merc 450SE          16.4 275.8 #> Merc 450SL          17.3 275.8 #> Merc 450SLC         15.2 275.8 #> Cadillac Fleetwood  10.4 472.0 #> Lincoln Continental 10.4 460.0 #> Chrysler Imperial   14.7 440.0 #> Fiat 128            32.4  78.7 #> Honda Civic         30.4  75.7 #> Toyota Corolla      33.9  71.1 #> Toyota Corona       21.5 120.1 #> Dodge Challenger    15.5 318.0 #> AMC Javelin         15.2 304.0 #> Camaro Z28          13.3 350.0 #> Pontiac Firebird    19.2 400.0 #> Fiat X1-9           27.3  79.0 #> Porsche 914-2       26.0 120.3 #> Lotus Europa        30.4  95.1 #> Ford Pantera L      15.8 351.0 #> Ferrari Dino        19.7 145.0 #> Maserati Bora       15.0 301.0 #> Volvo 142E          21.4 121.0"}]
